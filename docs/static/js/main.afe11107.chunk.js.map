{"version":3,"sources":["Components/AddCatergory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","Components/GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","gif","GifExpertApp","categories","console","log","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAuBeA,EAnBM,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,cAEnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAWA,OACI,sBAAMC,SANW,SAACC,GAClBA,EAAEC,iBACFN,EAAcE,IAId,SACI,uBAAOK,KAAK,OAAOC,MAAON,EAAYO,SAX1B,SAACJ,GACjBF,EAAcE,EAAEK,OAAOF,a,uBCTlBG,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACZC,EADY,iDACoCC,UAAUH,GAD9C,+DAECI,MAAMF,GAFP,cAEZG,EAFY,gBAGGA,EAAKC,OAHR,uBAGXC,EAHW,EAGXA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QATvB,kBAYXM,GAZW,4CAAH,sDCWJO,EATK,SAAC,GAAwB,IAAD,IAAtBL,IAAME,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAC/B,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCsBDO,EAvBE,SAAC,GAAe,IAAdnB,EAAa,EAAbA,SAEf,ECHyB,SAACA,GAC1B,MAA0BX,mBAAS,CAC/BkB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNxB,EAAOC,GACFwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGvB,CAACpB,IAEIqB,EDbwBK,CAAa1B,GAAhCa,EAAZ,EAAON,KAAP,EAAoBa,QAQpB,OACI,qCACI,6BAAKpB,IACL,qBAAKgB,UAAU,YAAf,SACKH,EAAOJ,KAAI,SAAAkB,GAAG,OACX,cAAC,EAAD,CAA0BjB,IAAKiB,GAAbA,EAAIhB,aES3BiB,EAxBM,WAEjB,MAAoCvC,mBAAS,IAA7C,mBAAOwC,EAAP,KAAmBzC,EAAnB,KAEAmC,qBAAU,WACNnC,EAAc,CAAC,gBAChB,IAOH,OADA0C,QAAQC,IAAIF,GAER,qCACI,8CACA,uBACA,cAAC,EAAD,CAAazC,cAAeA,IAC3B,cAAC,EAAD,CAA0BY,SAAU6B,GAAtBA,GACf,wBAAQG,QAXE,WACd5C,EAAc,GAAD,mBAAKyC,GAAL,CAAiB,aAU1B,yBCZGI,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.afe11107.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n const AddCategory = ({setCategories})=>{\r\n     \r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const handleInput = (e) =>{\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        setCategories(inputValue)\r\n    }\r\n\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" value={inputValue} onChange={handleInput}/>\r\n        </form>\r\n    )\r\n}\r\nexport default AddCategory;\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGif = async (category) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=4P584DpZasqfbTNbU9lmdW1QlT7TeBcw`\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img =>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react';\r\n\r\nconst GifGridItem = ({img: {title, url}}) =>{\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nimport GifGridItem from './GifGridItem'\r\n\r\nconst GifGrid =  ({category}) =>{\r\n\r\n    const {data:images, loading} = useFetchGifs(category);\r\n    // const [gifs, setGifs] = useState([]);\r\n\r\n    // useEffect(()=>{ \r\n    //     getGif(category)\r\n    //         .then(setGifs)\r\n    // },[category])\r\n     \r\n    return( \r\n        <>\r\n            <h3>{category}</h3>\r\n            <div className=\"card-grid\"> \r\n                {images.map(gif => (\r\n                    <GifGridItem key={gif.id} img={gif}/>\r\n                    )\r\n                    )}            \r\n            </div>\r\n       </>\r\n    )\r\n}\r\n\r\nexport default GifGrid","import { useEffect, useState } from \"react\";\r\n\r\nimport { getGif } from '../helpers/getGifs';\r\n \r\n export const useFetchGifs = (category) =>{\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(()=>{ \r\n        getGif(category)\r\n            .then(imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n    },[category])\r\n\r\n    return state;\r\n }","import React, { useEffect, useState } from 'react';\r\n\r\nimport AddCategory from './AddCatergory'\r\nimport GifGrid from './GifGrid'\r\n\r\nconst GifExpertApp = () =>{\r\n\r\n    const [categories, setCategories] = useState(\"\");\r\n\r\n    useEffect(()=>{\r\n        setCategories(['One Punch'])\r\n    }, [])\r\n\r\n    const handleAdd = () =>{\r\n        setCategories([...categories, 'naruto']);\r\n      \r\n    }\r\n    console.log(categories)\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <hr></hr>\r\n            <AddCategory setCategories={setCategories}/>\r\n            {<GifGrid key={categories} category={categories}/>}\r\n            <button onClick={handleAdd}>Agregar</button>\r\n        </>\r\n    )\r\n}\r\n \r\nexport default GifExpertApp;\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './Components/GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}